20220824 깃허브 특강
email : ingunbi@gmail.com
insta @chris_ingunbi

git 
-> github 홈페이지(인스타그램 같은 것)
-> gitlab(개발자들 선호-무료인데 지원↑)

깃허브 - 일종의 카페24
오픈소스 이유 - 유명해지려고, 팔로워 수↑

[vcs] https://kotlinworld.com/264
Git(오픈소스-기능이 제일 많음)
SVN(보안-주로 게임개발에 사용)
Perforce(유료)

프로젝트 협업 도구
Jira, Redminem, Mantis, Slack, Trello, Notion, Zeplon, SVN, Git, Teamviewer, Zoom 

*변경점*


[실습] 팀마다 리소스 라이브러리 만들 것
1. 자기소개.pptx 파일 필요
2. 이미지, 아이콘, 사운드, 문서양식 등 리소스 파일
3. github.com 회원가입

강의 테스트용 토큰
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

git 설치 -> editor
IDE통합 개발 환경(Integrated Development Environment)
CLI - Command line interface => 윈도우 명령 프롬프트
GUI - Graphic User interface => 이거 씀

git허브 
1.프로필 주소
2.저장소 페이지 주소
3.특정 프로젝트 주소(hello_world)
https://github.com/seoyoon0111/hello_world.git


hello.html
<!DOCTYPE html>...
<html>
<body
<h1>Hello JS</h1>
<script>
console.log("Hello world");
</script>
</body>
</html>

hello.md
# hello git

## git 명령어 요약

- clone : 원격 저장소를 내 로컬 저장소에 복사
- add : 스테이지 영역에 내 작업들을 리스트에 올림(커밋 직전) stage / unstage
- commit : 스테이지 영역에 올려둔 파일을 가지고 커밋(=세이브)을 만든다. 커밋 메세지 작성 하기(습관)
- push : 로컬저장소에 만든 커밋(들)을 원격 저장소에 업로드


## 추가 내용
- 새로운 커밋 내용 추가
- 등등


# 소스트리 하는법
1. 클론 생성
소스 경로: 내 깃허브 저장소 주소/남의 저장소 주소
목적지 경로:C:\Users\tjdbs\OneDrive\문서\딥러닝기반AI엔지니어링\github\github_저장소\이름생성
이름:위의 목적지 경로에서 자동생성 됨
->클론
2. pull/push(보통 남의 저장소를 허가 받은 후 진행)
먼저 pull->탐색기를 열어 파일을 넣음->커밋되지 않은 변경사항 뜨면 커밋작성->pull->push->깃허브 저장소에 들어가 제대로 파일이 들어갔는지 확인
3. 파일 삭제하는 법
탐색기에서 파일 삭제 후 삭제한 파일이 스테이지에 뜨면 커밋에 삭제라고 작성 후 push->깃허브에서 삭제 확인

#팀별 깃허브 생성


20220825 git 특강
1. 브랜치 생성
2. 병합(Merge)
  - 에디터에서 코드들 직접 비교해가면서 완성본 만들기 
  - 필요없는 코드는 코드버리기
3. 아예 내용 되돌리고 싶을 때는 reset

# 미션
1. 팀 깃허브
2. readme.md를 각자의 브랜치로 생성
3. readme.md 파일 각자 작성 후
4. main 브랜치에 모두 병합
=================================

# 파일 삭제하는 법
되돌리기
reset
-아예 커밋 자체를 다 되돌려 놓음
-사용이 가단
-작업들 다 날라갈 수 있음

브랜치
-브랜치를 백업으로 이용하는 방법
-백업을 브랜치로 남겨두었으므로 충돌은 많지 않다
-브랜치 점점 복잡해짐

revert(정석)
-되돌리기를 커밋으로 남기는 방법
-편함
-충돌 해결 이슈

===========================
스태스(임시저장)
-임시 저장소
-커밋하려는 내용들을 잠시 저장
-다시 적용하거나 삭제 가능

rebase
-merge와 유사
-내 브랜치를 새로운 bse로 만드는 작업(내 브랜치->main으로)
-메인 브랜치쪽 작업량 < 내 브랜치 작업량
->rebase 하는 것이 더 좋을 수 있다.

git 기초 명령어
-git clone[원격저장소][로컬저장소]:원격 저장소를 복사
-git add:스테이지에 올리는 작업(stage)
-git commit: 스테이지 영역에 있는 작업을 커밋으로 만듬(커밋이라 함은 일종의 작업 단위)
-git push:원격 저장소에 커밋을 올린다

코드 뭉치 버리기(커밋하지 않은 상태)
-commit 활동을 하기 전에 그냥 작성했던거 버림
되돌리기(커밋한 상태)

브랜치 생성 및 변경
-git branch: 기존 내용을 유지하고 새로운 기능이나 내용추가 하고 싶을 때마다 브랜치 생성
-git checkout: 특정 브랜치에서 작업을 하고 싶을 때 체크아웃
-소스트리에서 체크아웃은 브랜치 이름을 더블클릭하면 변경되므로 편리

병합
-git merge: 
:서로 변경한 부분이 겹치지 않는 경우 그냥 병합(fast-forward)
:서로 작업한 부분이 겹치는 경우 진짜 병합->충돌 발생(conflict) -> 충돌 해결

충돌해결
-에디터에서 직접 코드 작성했던 담당자들이 모여서 최종 코드를 함께 완성(co-programming, 페어 프로그래밍)
-근데 확인해보니 둘 중 한쪽 코드는 버려도 될 경우는 저장소것 사용 또는 내것 사용 등을 선택하여 적용

stash
-체크아웃 전, 커밋하려전 내용을 임시보관
-유용

rebase
-사실상 merge인데 현재 브랜치가 대상 브랜치보다 더 상위로 바꿀 때
-위험하니 조심스럽게 사용

커밋 메시지를 잘 쓰자
주석은 최소로 남기자
기능 개발할 때마다 커밋하기

#팀별 미션
1. main 브랜치 생성
2. 자신의 브랜치에 준비한 자료들을 업로드(이미지, 폰트, 다양한 자료들)
3. main 브랜치에 병합
4. 폴더 구조 등은 개발자들끼리 협의
5. 리소스 폴더를 구성하고
6. Readme.md 파일에 매뉴얼을 작성
7. Readme.md 파일에 팀원들 수고하셨습니다. 인사들 각자 남기기
merge, rebase 상관 없음
8. 1인 1회 이상 revert 사용 후 커밋하기
 

svn
-sever 세팅은 관리자가 해주어야 함(server 세팅 강좌 찾아서 해야함+네트워크 포트포워딩 지식이 있어야 함)

SVN client
-tortoisesvn
https://tortoisesvn.net/ 에서 다운로드 및 설치

checkout-원격저장소와 로컬저장소를 동기화(git으로 치면 clone)
commit-로컬저장소의 작업을 원격저장소로 보내는 작업(git으로 치면 push)
update-원격저장소의 작업물들을 내 로컬 저장소로 옮겨오는 작업(git으로 치면 pull)


## SVN 미션
-git에서 만들었던 폴더 자료 구조들 svn에 옮기기
-자료들을 역할을 나누어서 각자 commit을 하기
-readme.md 파일을 생성하고 인사말 작성
-해당 readme.md 파일을 커밋&업데이트&충돌처리 해보기
